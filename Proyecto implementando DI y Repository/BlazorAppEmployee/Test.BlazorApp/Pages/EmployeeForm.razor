@page "/employeeform"
@using Test.BlazorApp.Services
@using Test.Domain.DTOs
@using Test.Domain.Entities
@using Test.Domain.Interfaces
@using Test.Services

@inject EmployeeState EmployeeState
@inject IPositionService PositionService
@inject IStateService StateService

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

@implements IDisposable

<div class="main">
    <EditForm EditContext="editContext" OnValidSubmit="CreateEmployee">
        <div class="col-sm-12">           

            <div class="col-8">
                <h4>Alta de empleado</h4>
                @if (isError)
                {
                    <div class="alert alert-danger">Verifique la información.</div>
                }

                <div class="form-group">
                    <label for="nombre">Nombre:</label>
                    <div>
                        <InputText class="form-control" @bind-Value="Employee.Nombre" />
                        <ValidationMessage For="@(() => Employee.Nombre)" />
                    </div>
                </div>

                <div class="form-group">
                    <label for="apellido">Apellido:</label>
                    <div>
                        <InputText class="form-control" @bind-Value="Employee.Apellido" />
                        <ValidationMessage For="@(() => Employee.Apellido)" />
                    </div>
                </div>

                <div class="form-group">
                    <label for="puestoId">Puesto ID:</label>
                    <InputSelect class="form-control" @bind-Value="Employee.PuestoId">
                        @foreach (var Position in Positions)
                        {
                            <option value="@Position.Id">@Position.Nombre</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Employee.PuestoId)" />
                </div>

                <div class="form-group">
                    <label for="fechaNacimiento">Fecha de Nacimiento:</label>
                    <InputDate class="form-control" @bind-Value="Employee.FechaNacimiento" />
                    <ValidationMessage For="@(() => Employee.FechaNacimiento)" />
                </div>

                <div class="form-group">
                    <label for="fechaContratacion">Fecha de Contratación:</label>
                    <InputDate class="form-control" @bind-Value="Employee.FechaContratacion" />
                    <ValidationMessage For="@(() => Employee.FechaContratacion)" />
                </div>

                <div class="form-group">
                    <label for="telefono">Teléfono:</label>
                    <InputText class="form-control" @bind-Value="Employee.Telefono" />
                    <ValidationMessage For="@(() => Employee.Telefono)" />
                </div>

                <div class="form-group">
                    <label for="correoElectronico">Correo Electrónico:</label>
                    <InputText class="form-control" @bind-Value="Employee.CorreoElectronico" />
                    <ValidationMessage For="@(() => Employee.CorreoElectronico)" />
                </div>

                <div class="form-group">
                    <label for="estadoId">Estado ID:</label>
                    <InputSelect class="form-control" @bind-Value="Employee.EstadoId">
                        @foreach (var State in States)
                        {
                            <option value="@State.Id">@State.Nombre</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Employee.EstadoId)" />
                </div>
                  
                <AddressEditor Address="Employee.Address" />
            </div>
            <div>
                <p>@Message</p>
            </div>
            <div>
                <button class="btn btn-primary" type="Submit" disabled=@isError>
                    Guardar
                </button>
            </div>
        </div>
            
        
        <DataAnnotationsValidator />
    </EditForm> 
</div>

@code {
    EmployeeDto Employee => EmployeeState.Employee;
    private EditContext editContext;
    private List<Position> Positions = new();
    private List<State> States = new();

    bool isSubmitting;
    bool isError = false;
    string Message = "";
    protected void ShowError()
    {
        isError = true;
    }
    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        isError = !editContext.Validate();
        StateHasChanged();
    }

    protected override async void OnInitialized()
    {
        editContext = new(Employee.Address);
        editContext.OnFieldChanged += HandleFieldChanged;

        Positions = await PositionService.GetPositionsAsync();
        States = await StateService.GetStatesAsync();

        Employee.FechaNacimiento = new DateTime(2000, 1, 1);
        Employee.FechaContratacion = new DateTime(2025, 1, 1);
    }

    public void Dispose()
    {
        editContext.OnFieldChanged -= HandleFieldChanged;
    }

    async Task CreateEmployee()
    {
        var Host = NavigationManager.BaseUri;
        var response = await HttpClient.PostAsJsonAsync(
            "https://localhost:7115/api/employee", EmployeeState.Employee);

        if(response.IsSuccessStatusCode)
        {
            Message = "Empleado registrado";
            EmployeeState.Reset();
            StateHasChanged();
            //var newEmployeeId = await response.Content.ReadFromJsonAsync<int>();            
            //NavigationManager.NavigateTo($"api/employee/{newEmployeeId}");
        }
        else
        {
            ShowError();
        }       
    }

}